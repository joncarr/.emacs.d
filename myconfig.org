* Configuration
** General Settings
*** Variables
#+BEGIN_SRC emacs-lisp
(defvar user-setup-directory          (expand-file-name "setup"          user-emacs-directory))
(defvar user-setup-builtins-directory (expand-file-name "setup/builtins" user-emacs-directory))
(defvar local-dev-package-directory   (expand-file-name "packages"       user-emacs-directory))
(defvar user-data-directory           (expand-file-name ""               user-emacs-directory))
(defvar user-cache-directory          (expand-file-name ".cache"         user-emacs-directory))
(defvar user-bin-directory            (expand-file-name "bin"            "~"))
(setq custom-file                     (expand-file-name "settings.el"    user-emacs-directory))
(make-directory user-cache-directory t)
#+END_SRC
*** Show matching pair
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC
*** Use System Clipboard
#+BEGIN_SRC emacs-lisp
  (setq x-select-enable-clipboard t)
#+END_SRC
*** Remove bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC
*** Conservative Scroll
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
*** Remove Tool Bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
*** Remove Menu Bar
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC
*** Remove Scroll Bar
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC
*** Subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
*** Remove Emacs Start Screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
*** Start in dashboard
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC
*** Don't load outdated byte code
#+BEGIN_SRC emacs-lisp
(setq load-prefer-newer t)
#+END_SRC
*** Electric Pair
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\{ . ?\})
			      (?\[ . ?])
			      ))
(electric-pair-mode t)
#+END_SRC
*** Terminal
**** Always use zsh
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC
**** y or n instead of yes or no
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
**** Launch Terminal keybinding
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC
*** Delete selection mode
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC
*** Use Spaces instead of tabs
#+BEGIN_SRC emacs-lisp
  (setq tab-stop-list (number-sequence 4 200 4))
#+END_SRC
*** Spell Check
#+BEGIN_SRC emacs-lisp
  (flyspell-mode 1)
  (add-hook 'go-mode 'flyspell-prog-mode)
  (add-hook 'rust-mode 'flyspell-prog-mode)
  (add-hook 'javascript-mode 'flyspell-prog-mode)
  (add-hook 'c-mode 'flyspell-prog-mode)
  (add-hook 'c++-mode 'flyspell-prog-mode)
  (use-package helm-flyspell
    :ensure t)

#+END_SRC
** Environment
*** Exec Path From Shell
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :if (memq system-type '(gnu gnu/linux))
    :init
    (customize-set-variable 'exec-path-from-shell-arguments nil)
    :config
    (exec-path-from-shell-initialize)
    (exec-path-from-shell-copy-env "GOPATH")
    (exec-path-from-shell-copy-env "RUST_SRC_PATH")
    (exec-path-from-shell-copy-env "RLS_ROOT"))
#+END_SRC
** Async 
*** Use async when possible
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC
** Packages
*** Fix Regex
#+BEGIN_SRC emacs-lisp
  (use-package pcre2el
    :ensure t
    :config (pcre-mode)
    :diminish pcre-mode)
#+END_SRC
*** key-chord
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :init (key-chord-mode 1)
    :config
    (setq key-chord-two-keys-delay 0.075)
    :diminish key-chord-mode)
#+END_SRC
*** Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (diminish 'eldoc-mode)
    (diminish 'undo-tree-mode)
    (diminish 'auto-revert-mode)
    (diminish 'subword-mode)
)
#+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    :init
    (helm-mode 1)
    :config
    (setq helm-M-x-fuzzy-match t))

  (use-package helm-make
    :ensure t
    :config
    (setq helm-make-fuzzy-matching 1))
#+END_SRC
*** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
     (setq company-minimum-prefix-length 3
    	company-tooltip-align-annotations t
    	company-tooltip-flip-when-above t
     	company-idle-delay 0
    	)
     (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))

    (global-set-key "\t" 'company-complete-common)
    (add-hook 'after-init-hook 'global-company-mode)
    :diminish company-mode)

  (use-package company-math
    :ensure t
    :after company
    :config
    (add-to-list 'company-backends 'company-math-symbols-unicode)
    (add-to-list 'company-backends 'company-math-symbols-latex))
#+END_SRC
*** Ido Vertical 
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init (ido-vertical-mode 1)
    :config
    (setq ido-vertical-define-keys 'C-n-andC-p-only))
#+END_SRC
*** Swiper
#+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure t
      :bind ("C-s" . swiper))
#+END_SRC
*** Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode t)
    :diminish flycheck-mode)
#+END_SRC
*** YASnippet
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init (yas-global-mode 1)
      :diminish yas-minor-mode)

    (use-package go-snippets
      :ensure t)
#+END_SRC
*** auto-yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package auto-yasnippet
    :ensure t)
#+END_SRC
*** ggtags
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :ensure t
    :defer t
    :config
    (add-hook 'c-mode-common-hook
		(lambda ()
		  (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		    (ggtags-mode 1)))))
#+END_SRC
*** Emmet
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode)
    (add-hook 'emmet-mode-hook (lambda ()
				 (setq emmet-indent-after-insert nil)
				 (setq emmet-indentation 4)
				 (setq emmet-move-cursor-between-quotes t)
				 )
	      )
    )
#+END_SRC
*** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init (projectile-mode 1)
    :config
    (setq projectile-completion-system 'helm
	  projectile-find-dir-includes-top-level t)

    (defun neotree-project-root (&optional directory)
      "Open a NeoTree browser for a project directory"
      (interactive)
      (let ((default-directory (or directory default-directory)))
	(if (and (fboundp 'neo-global--window-exists-p)
		 (neo-global--window-exists-p))
	    (neotree-hide)
	  (neotree-find (projectile-project-root)))))

    (progn
      (bind-keys
       :map projectile-mode-map
       ("C-x C-f" . helm-find-files)
       ("C-x C-p" . projectile-find-file)
       ("C-c p d" . projectile-find-dir)
       ("C-c p D" . projectile-dired))
      (setq projectile-known-projects-file (expand-file-name  "projectile-bookmarks.eld" user-cache-directory)
	    projectile-cache-file (expand-file-name  "projectile.cache" user-cache-directory))
      (setq projectile-enable-caching t)
      (setq projectile-require-project-root nil)
      (setq projectile-completion-system 'helm)
      )
    :diminish projectile-mode)

    (use-package counsel-projectile
      :ensure t
      :init (counsel-projectile-mode 1)
      :config
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
*** popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
*** hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode)
    :diminish hungry-delete-mode)
#+END_SRC
*** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :init (unbind-key "C-c v")
    :bind ("C-=" . er/expand-region))
#+END_SRC
*** aggressive-indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :init (global-aggressive-indent-mode 1)
    :diminish aggressive-indent-mode)
#+END_SRC
*** Highlight todos
#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :ensure t
    :config
    (global-hl-todo-mode))
#+END_SRC
*** lorem-ipsum
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t
    :defer t)
#+END_SRC
*** uuidgen
#+BEGIN_SRC emacs-lisp
  (use-package uuidgen
    :ensure t
    :defer t)
#+END_SRC
*** LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :config
    (setq lsp-auto-configure t
	  lsp-auto-require-clients t
	  lsp-prefer-flymake nil
	  lsp-hover-enabled t
	  lsp-signature-enabled t
	  lsp-enable-completion-at-point t))

  (use-package company-lsp
    :ensure t
    :config
    (push 'company-lsp company-backends))

  (use-package lsp-ui
    :ensure t)

#+END_SRC
** Navigation
*** Avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind (("C-c j w" . avy-goto-word-1)
	   ("C-c j l" . avy-goto-line)
	   ("C-c j b" . avy-pop-mark)
	   ("C-c j c" . avy-goto-char-2)
	   ("C-c j s" . avy-goto-symbol-1)))
#+END_SRC
*** Line Numbers
**** nlinum
#+BEGIN_SRC emacs-lisp
  (use-package nlinum
    :ensure t
    :config
    (global-nlinum-mode))
#+END_SRC
**** Relative line numbers
#+BEGIN_SRC emacs-lisp
  (use-package nlinum-relative
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'nlinum-relative-mode))
#+END_SRC
*** Evil Mode
#+BEGIN_SRC emacs-lisp
  (use-package goto-last-change
    :ensure t)

  (use-package evil
    :ensure t
    :init (evil-mode 1)
    :config
    (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
   ;; (define-key evil-normal-state-map (kbd "") 'evil-avy-goto-word-0) 
    :diminish evil-mode)

  (use-package evil-snipe
    :ensure t
    :init
    (evil-snipe-mode 1)
    :diminish evil-snipe-local-mode)

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1)
    :diminish evil-snipe-mode)

  (use-package evil-leader
    :ensure t
    :init (global-evil-leader-mode)
    :config
    (evil-leader/set-leader "SPC"))
#+END_SRC
** Version Control
*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)

#+END_SRC
*** GitGutter
#+BEGIN_SRC emacs-lisp
  ;; (use-package git-gutter
  ;;   :ensure t
  ;;   :init (global-git-gutter-mode +1)
  ;;   :config
  ;;   (git-gutter:linum-setup)
  ;;   :diminish git-gutter-mode)
  (use-package git-gutter-fringe
    :ensure t
    :if window-system
    :config
    (use-package fringe-helper)
    (setq git-gutter-fr:side 'right-fringe)
    (add-hook 'prog-mode-hook 'git-gutter-mode)
    (add-hook 'focus-in-hook 'git-gutter:update-all-windows)
    (setq-default fringes-outside-margins t)
    (fringe-helper-define 'git-gutter-fr:added '(center repeated)
                          "XXX.....")
    (fringe-helper-define 'git-gutter-fr:modified '(center repeated)
                          "XXX.....")
    (fringe-helper-define 'git-gutter-fr:deleted  '(center repeated)
                          "XXX....."))
#+END_SRC
** Look and Feel 
*** General
**** Line Highlight
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
**** Prettify Symbols
#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC
*** Themes
**** Gruvbox
#+BEGIN_SRC emacs-lisp
  (use-package gruvbox-theme
    :disabled t
    :ensure t
    :init
    (load-theme 'gruvbox-dark-hard :no-confirm))
#+END_SRC
**** Gotham
#+BEGIN_SRC emacs-lisp
  (use-package gotham-theme
    ;; :disabled t				
    :ensure t
    :init
    (load-theme 'gotham :no-confirm))
#+END_SRC
**** Zenburn
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :disabled t
    :ensure t
    :config
    (load-theme 'zenburn :no-confirm))

#+END_SRC
*** Modeline
**** Show Line and Column Numbers on modeline
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC
**** Spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote slant))
    (spaceline-spacemacs-theme))
#+END_SRC
*** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init (beacon-mode 1)
    :diminish beacon-mode)
#+END_SRC
*** Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '(
			    (recents . 5)
			    (projects . 10)
			    ))
    (setq dashboard-banner-logo-title "")
    (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo_emacs_white.png"))
#+END_SRC
*** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init (rainbow-delimiters-mode 1))
#+END_SRC
*** Golden Ratio
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
    :ensure t
    :config 
    (golden-ratio-mode 1)
    :diminish golden-ratio-mode)
#+END_SRC
** Windows and Buffers
*** Buffers
**** Kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
**** Expert Mode
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
**** Enable IBuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("org" (name . "^.*org$"))
                 ("web" (or (mode . web-mode) (mode . js2-mode)))
                 ("shell" (or (mode . eshell-mode) (mode . shell-mode))))
                ("programming" (or
                                (or (mode . go-mode) (name . "^.*go$"))
                                (mode . rust-mode)
                                (mode . python-mode)
                                (mode . c-mode)
                                (mode . c++-mode)))
                ("emacs" (or
                          (name . "^\\*scratch\\*$")
                          (name . "^\\*Messages\\*$")))
                )))
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  ;; Don't show filter groups if there are no buffers in that group
  (setq ibuffer-show-empty-filter-groups nil)
#+END_SRC
**** Switch Buffers
#+BEGIN_SRC emacs-lisp
  ;;(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
**** IDO Vertical Mode
#+BEGIN_SRC emacs-lisp
(use-package ido-vertical-mode
  :ensure t
  :init
(ido-vertical-mode 1))
(setq ido-vertical-define-keys 'C-n-andC-p-only)
#+END_SRC
*** Windows
**** Switch-Window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
**** Window Splitting
Custom functions that will split the window and switch focus to the
newly created window
***** Horizontal Split
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
#+END_SRC
***** Vertical Split
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
**** Window specific key bindings 
#+BEGIN_SRC emacs-lisp
  (bind-key "C-c w =" 'balance-windows)
  (bind-key "C-c w k" 'delete-window)
  (bind-key "C-c w /" 'split-window-right)
  (bind-key "C-c w -" 'split-window-below)
  (bind-key "C-c w d" 'delete-other-windows)
#+END_SRC
** File Handling
*** Keep backup and auto-save files separate
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `((".*" . ,(locate-user-emacs-file ".backup")))
      auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC
*** Delete files to trash
#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
#+END_SRC
*** Neotree
#+BEGIN_SRC emacs-lisp
    (use-package neotree
      :ensure t
      :bind
      ("C-c f t" . neotree-toggle)
      :config
      (setq neo-window-width 32
	    neo-create-file-auto-open t
	    neo-show-hidden-files t
	    neo-mode-line-type 'neotree
	    neo-auto-indent-point t
	    neo-banner-message nil
	    neo-smart-open t)
       (add-hook 'neotree-mode-hook
	      (lambda ()
	      (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
	      (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
	      (define-key evil-normal-state-local-map (kbd "q") 'neotree-enter)
	      (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
	      (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
	      (define-key evil-normal-state-local-map (kbd "j") 'neotree-next-line)
	      (define-key evil-normal-state-local-map (kbd "k") 'neotree-previous-line)
	      (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
	      (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)
       ))
  )
#+END_SRC
*** Protect user-writable files
#+BEGIN_SRC emacs-lisp
  (use-package hardhat
    :ensure t
    :init (global-hardhat-mode)
    :diminish global-hardhat-mode)
#+END_SRC
*** Edit files as root
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :defer t
    :bind ("C-c f s" . sudo-edit))
#+END_SRC
** Convenience Functions
*** visit configuration file
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/myconfig.org"))
#+END_SRC
*** reload configuration file
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/myconfig.org")))
#+END_SRC
*** copy-whole-line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c w l") 'copy-whole-line)
#+END_SRC
*** kill-whole-word
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'kill-whole-word)
#+END_SRC
*** Emacs server shutdown
#+BEGIN_SRC emacs-lisp
  ;;; define function to shutdown emacs server instance
  (defun server-shutdown ()
    "Save buffers, Quit, and Shutdown (kill) server"
    (interactive)
    (save-buffers-kill-emacs))
#+END_SRC

*** Move Line Up and Move Line Down
#+BEGIN_SRC emacs-lisp
  (defun move-line-up ()
    (interactive)
    (transpose-lines 1)
    (forward-line -2))

  (defun move-line-down ()
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))

  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
#+END_SRC
** Macros
#+BEGIN_SRC emacs-lisp
  (fset 'colonize
	[escape ?A ?\; escape])
#+END_SRC
** Major Modes and Languages
*** Org
**** Org Snippets
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
**** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
*** Go
#+BEGIN_SRC emacs-lisp
  (use-package go-projectile
    :ensure t)

  (use-package go-dlv
    :ensure t)

  (use-package go-gopath
    :ensure t)

  (use-package go-mode
    :ensure t
    :init
    (unbind-key "C-c C-j" go-mode-map)
    :config
    (setq go-tab-width 4)
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save)
    (add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode)))

  (use-package go-impl
    :ensure t
    :after go-mode)

  (use-package go-eldoc
    :ensure t
    :after go-mode
    :config
    (if (file-exists-p (concat (projectile-project-root) "go.mod"))
        (setq go-eldoc-gocode "~/code/go/bin/gocode-gomod")
      (setq go-eldoc-gocode "~/code/go/bin/gocode"))
    (add-hook 'go-mode-hook 'go-eldoc-setup))

  (use-package go-guru
    :ensure t
    :after go-mode
    :config
    (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))

  (use-package go-add-tags
    :ensure t
    :config
    (define-key go-mode-map (kbd "C-c m t") #'go-add-tags))

  (use-package lsp-mode
    :config
    (require 'lsp)
    (require 'lsp-ui)
    (require 'lsp-clients)
    (setq lsp-prefer-flymake nil)
    (add-hook 'go-mode-hook 'lsp))

  (use-package lsp-go
    :ensure t
    :after go-mode
    :config
    (setq lsp-clients-go-server "~/code/go/bin/go-langserver"))

  (use-package company-go
    :ensure t
    :after go-mode
    :config
    (setq company-idle-delay .1)
    (setq company-tooltip-limit 20)
    (setq company-tooltip-align-annotations t
          company-go-show-annotation t
          )
    (add-hook 'go-mode-hook (lambda ()
                              (set(make-local-variable 'company-backends) '(company-go company-lsp))
                              (company-mode))))
#+END_SRC
*** Rust
#+BEGIN_SRC emacs-lisp
  (use-package lsp-rust
    :ensure t)

  (defun configure-rust/setup-env ()
    "RLS requires some environment variables to be setup. We use rustup to get the values."

    (when (executable-find "rustup")
      (require 's)
      (require 'dash)
      (setq rust-default-toolchain
	    (car (s-split " " (-first
			       (lambda (line) (s-match "default" line)) 
			       (s-lines (shell-command-to-string "rustup toolchain list"))))))
      ;; tell racer to use the rustup-managed rust-src
      ;; rustup component add rust-src
      (setq rust-src-path (concat (getenv "HOME") "/.multirust/toolchains/" rust-default-toolchain "/lib/rustlib/src/rust/src"))
      (setq rust-bin-path (concat (getenv "HOME") "/.multirust/toolchains/" rust-default-toolchain "/bin"))
      (setq racer-rust-src-path rust-src-path)
      (setenv "RUST_SRC_PATH" rust-src-path)
      (setenv "RUSTC" rust-bin-path)))

  (use-package lsp-mode
    :config
    (setq lsp-print-io t)
    ;; (setq lsp-rust-rls-command '("rustup" "run" "nightly" "rls")) 
    (setenv "RUST_BACKTRACE" "full")
    (setenv "RUST_LOG" "rls::=debug")
    ;; Fix problem seems to be caused by upgrading lsp-mode package to v3.
    (unless (fboundp 'lsp-rust-enable)
      (defun lsp-rust-enable ()
	(require 'lsp-clients)
	;; We don't realy need lsp-rust-rls-command for now, but we will support it
	(when (boundp 'lsp-rust-rls-command)
	  (lsp-register-client
	   (make-lsp-client :new-connection (lsp-stdio-connection lsp-rust-rls-command)
			    :major-modes '(rust-mode)
			    :server-id 'rls
			    :notification-handlers (lsp-ht ("window/progress" 'lsp-clients--rust-window-progress)))))
	(lsp)))
    )

  (use-package rust-mode
    :ensure t
    :mode "\\.rs\\'"
    :config
    (setq rust-format-on-save t)
    (require 'lsp-mode)
    (require 'lsp)
    (require 'lsp-ui)
    (require 'lsp-clients)
    (add-hook 'rust-mode-hook 'lsp-mode)
    (add-hook 'rust-mode-hook #'lsp-rust-enable)
    (add-hook 'rust-mode-hook #'flycheck-mode)
    (configure-rust/setup-env)
    ;; (with-eval-after-load 'lsp-mode
    ;;   (setq lsp-rust-rls-command '("rustup" "run" "nightly" "rls"))
    ;;   (require 'lsp-rust))
    )

  (use-package flycheck-rust
    :ensure t
    :after flycheck
    :commands flycheck-rust-setup
    :init
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

  (use-package racer
    :ensure t
    :commands racer-mode
    :hook
    ((rust-mode . racer-mode)
     (racer-mode . eldoc-mode))
    :bind (:map rust-mode-map
		("M-." . racer-find-definition))
    :config
    (setq racer-complete-insert-argument-placeholders t))

  (use-package company-racer
    :ensure t
    :config
    (add-to-list 'company-backends 'company-racer)
    (add-hook 'racer-mode 'company-mode)
    (add-hook 'rust-mode-hook (lambda ()
				(set(make-local-variable 'company-backends) '(company-racer company-lsp))
				(company-mode)))

    (setq company-tooltip-align-annotations t))


  (use-package cargo
    :ensure t
    :commands cargo-minor-mode
    :hook (rust-mode . cargo-minor-mode))

  (use-package toml-mode
    :ensure t
    :mode (("\\.toml\\'" . toml-mode)
	   ("/Pipfile\\'" . toml-mode)))

#+END_SRC
*** C/C++
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode)
    )
#+END_SRC
*** Web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :defer t
    :mode (("\\.html\\'" . web-mode)))

  (use-package css-mode                   ; CSS
    :defer t
    :config (setq css-indent-offset 4))

  (use-package js2-mode                   ; Powerful Javascript mode
    :ensure t
    :defer t
    :interpreter ("node"   . js2-mode)
    :mode (("\\.js\\'"     . js2-mode)
           ("\\.jsx\\'"    . js2-jsx-mode)
           ("\\.json$"     . js-mode)
           ("\\.template$" . json-mode))
    :config
    (progn
      (add-hook 'js2-mode-hook (lambda () (setq mode-name "js2")))
      (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 4)))
      (add-hook 'js2-mode-hook (lambda ()
                               (bind-key "M-j" 'join-line-or-lines-in-region js2-mode-map)))
      (setq js2-skip-preprocessor-directives t
            js2-mode-show-parse-errors nil
            js2-mode-show-strict-warnings nil
            js2-highlight-level 3           ; Try to highlight most ECMA built-ins
            )
      (setq-default js2-additional-externs
                    '("$" "unsafeWindow" "localStorage" "jQuery"
                      "setTimeout" "setInterval" "location" "skewer"
                      "console" "phantom"))))

  (use-package js2-refactor               ; Refactor Javascript
    :ensure t
    :defer t
    :init
    (add-hook 'js2-mode-hook 'js2-refactor-mode)
    :config
    (js2r-add-keybindings-with-prefix "C-c m r"))

  (use-package web-mode
    :defer t
    :init (progn
            (add-to-list 'auto-mode-alist '("\\.gohtml?\\'" . web-mode))
            (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
            (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode)))
    :config (progn
              (add-hook 'web-mode-hook
                        (lambda ()
                          (setq web-mode-style-padding 4)
                          (setq web-mode-script-padding 4)))))

  (use-package nvm
    :defer t)
  (use-package html-script-src
    :defer t)
  (use-package sass-mode
    :defer t)

  (use-package tern                       ; Javascript IDE backend
    :ensure t
    :defer t
    :init (add-hook 'js2-mode-hook #'tern-mode)
    :config
    ;; Don't generate port files
    (add-to-list 'tern-command "--no-port-file" 'append))

  (use-package company-tern               ; Auto-completion for javascript
    :ensure t
    :defer t
    :after company
    :config (add-to-list 'company-backends 'company-tern))

  (use-package company-web
    :ensure t
    :config (add-to-list 'company-backends 'company-web))
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init (elpy-enable))
#+END_SRC
*** Kotlin 
#+BEGIN_SRC emacs-lisp
  (use-package kotlin-mode
    :ensure t
    :defer t
    :config
    (add-to-list 'auto-mode-alist '("\\.kt\\'" . kotlin-mode)))


  (use-package flycheck-kotlin
    :ensure t)
#+END_SRC
*** GDScript
#+BEGIN_SRC emacs-lisp
  (use-package gdscript-mode
    :ensure t
    :mode "\\.gd\\'")
#+END_SRC
** Key and Keybindings
*** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3
          which-key-sort-order 'which-key-prefix-then-key-order)
    (which-key-add-key-based-replacements
      ;; Prefixes for personal bindings
      "C-c !" "flycheck"
      "C-c j" "jump"
      "C-c &" "yasnippet"
      "C-c w" "window"
      "C-c f" "file"
      "SPC b" "buffers"
      "SPC B" "bookmarks"
      "SPC c" "compile"
      "SPC d" "dired"
      "SPC e" "errors"
      "SPC f" "files"
      "SPC f c" "configuration"
      "SPC g" "go/guru"
      "SPC G" "git"
      "SPC h" "help"
      "SPC h d" "describe"
      "SPC i" "insert"
      "SPC i l" "lorem ipsum"
      "SPC i u" "UUID"
      "SPC j" "jump"
      "SPC m" "major mode"
      "SPC m i" "imports"
      "SPC m n" "navigate to"
      "SPC n" "navigate/narrow"
      "SPC n n" "narrow"
      "SPC o" "joncarr"
      "SPC p" "projects"
      "SPC p s" "projects/search"
      "SPC s" "search"
      "SPC t" "todos"
      "SPC T" "toggle"
      "SPC v" "mark"
      "SPC w" "window"
      "SPC w d" "delete"
      "SPC w s" "split"
      "SPC x" "text"
      "SPC x d" "downcase"
      "SPC x u" "upcase"
      "SPC x t" "transpose"
      "SPC x s" "spellcheck"
      "SPC y" "yasnippet")

    (which-key-add-major-mode-key-based-replacements 'markdown-mode
      "TAB" "markdown/images"
      "C-a" "markdown/links"
      "C-c" "markdown/process"
      "C-s" "markdown/style"
      "C-t" "markdown/header"
      "C-x" "markdown/structure"
      "m" "markdown/personal")

    (which-key-add-major-mode-key-based-replacements 'emacs-lisp-mode
      "m" "elisp/personal"
      "m e" "eval")

    (which-key-add-major-mode-key-based-replacements 'js2-mode
      "m" "js/personal"
      "m r" "refactor")

    (which-key-add-major-mode-key-based-replacements 'go-mode
      "SPC m" "go/personal"
      "SPC m n" "go/navigate"
      "SPC m i" "go/import"
      "SPC m g" "go/guru"
      "SPC m h" "go/help"
      "SPC m p" "go/playground")

    (which-key-add-major-mode-key-based-replacements 'rust-mode
      "SPC m" "rust/personal"
      "SPC m c" "rust/cargo"
      "SPC m g" "rust/UNUSED"
      "SPC m h" "rust/UNUSED"
      "SPC m n" "rust/navigate"
      "SPC m i" "rust/UNUSED"
      "SPC m p" "rust/UNUSED")

    (which-key-add-major-mode-key-based-replacements 'web-mode
      "C-c C-a" "web/attributes"
      "C-c C-b" "web/blocks"
      "C-c C-d" "web/dom"
      "C-c C-e" "web/element"
      "C-c C-t" "web/tags")

    :diminish which-key-mode
    )
#+END_SRC
*** Personal Key Bindings
**** general
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "SPC" 'helm-M-x
    "." 'er/expand-region)

  (global-set-key (kbd "C-c r") 'config-reload)
  (global-set-key (kbd "C-c e") 'config-visit)

  ;; Keybindings for Macros

  ;; Colonize, from INSERT mode, Moves to End of line and adds semicolon
  (global-set-key (kbd "C-<return>") 'colonize)

#+END_SRC
**** BOOKMARKS
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "Bl" 'list-bookmarks)
#+END_SRC
**** BUFFERS
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "bk" 'kill-current-buffer
    "bi" 'ibuffer
    "bs" 'helm-buffers-list
    "br" 'revert-buffer)
#+END_SRC
**** COMPILE
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "cc" 'helm-make-projectile
    "cC" 'compile
    "ck" 'kill-compilation
    "cm" 'helm-make
    "cr" 'recompile)
#+END_SRC
**** DIRED
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "dc" 'dired-do-copy
    "dd" 'wdired-change-to-dired-mode
    "dl" 'dired-do-symlink
    "dp" 'dired-do-chmod
    "dr" 'dired-do-rename
    "dx" 'dired-do-delete
    "dw" 'wdired-change-to-wdired-mode)
#+END_SRC
**** ERRORS
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "ec" 'flycheck-clear
    "eh" 'flycheck-describe-checker
    "el" 'flycheck-list-errors
    "en" 'flycheck-next-error
    "ep" 'flycheck-previous-error)
#+END_SRC
**** FILES
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "ff" 'helm-find-files
    "fr" 'helm-recentf
    "fs" 'sudo-edit
    "ft" 'neotree-toggle
    "fce" 'config-visit 
    "fcr" 'config-reload)
#+END_SRC
**** GIT
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "GS" 'magit-status
    "Gb" 'magit-branch-create
    "Gc" 'magit-clone
    "Gd" 'magit-branch-delete
    "Gf" 'magit-fetch
    "Gi" 'magit-init
    "Gm" 'magit-merge
    "GM" 'magit-merge-squash
    "Gp" 'magit-pull
    "Gr" 'magit-rebase)
#+END_SRC
**** HELP
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "hdc" 'describe-char
    "hdf" 'describe-function
    "hdF" 'describe-face
    "hdk" 'describe-key
    "hdm" 'describe-mode
    "hdp" 'describe-package
    "hdv" 'describe-variable)
#+END_SRC
**** INSERT
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "ill" 'lorem-ipsum-insert-list
    "ilp" 'lorem-ipsum-insert-paragraphs
    "ils" 'lorem-ipsum-insert-sentences
    "iu1" 'uuidgen
    "iu4" 'uuidgen)

#+END_SRC
**** JUMP
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "jw" 'avy-goto-word-1
    "jl" 'avy-goto-line
    "jp" 'avy-pop-mark
    "jc" 'avy-goto-char-2
    "js" 'avy-goto-symbol-1)
#+END_SRC
**** MAJOR MODE 
***** Go Mode
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "mt" 'go-add-tags
    "mr" 'go-rename
    "mhd" 'godoc-at-point
    "mgp" 'go-guru-peers
    "mgd" 'go-guru-definition
    "mg<" 'go-guru-callers
    "mg>" 'go-guru-callees
    "mg?" 'go-guru-describe
    "mgp" 'go-guru-pointsto
    "mgf" 'go-guru-freevars
    "mgr" 'go-guru-referrers
    "mge" 'go-guru-whicherrs
    "mgs" 'go-guru-set-scope
    "mgc" 'go-guru-callstack
    "mgi" 'go-guru-implements
    "mgx" 'go-guru-expand-region
    "mia" 'go-import-add
    "mig" 'go-goto-imports
    "mii" 'go-impl
    "mir" 'go-remove-unused-imports
    "mna" 'go-goto-arguments
    "mnf" 'go-goto-function
    "mnn" 'go-goto-function-name
    "mno" 'go-goto-opening-parenthesis
    "mnr" 'go-goto-return-values
    "mns" 'go-goto-docstring
    "mnm" 'go-goto-method-receiver
    "mpb" 'go-play-buffer
    "mpr" 'go-play-region)
#+END_SRC
***** Rust Mode
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "mcf" 'cargo-process-fmt
    "mci" 'cargo-process-init
    "mca" 'cargo-process-add
    "mcb" 'cargo-process-build
    "mcR" 'cargo-process-repeat
    "mcd" 'cargo-process-doc
    "mcB" 'cargo-process-bench
    "mcT" 'cargo-process-current-test
    "mcc" 'cargo-process-check
    "mcC" 'cargo-process-clean
    "mcn" 'cargo-process-new
    "mco" 'cargo-process-current-file-tests
    "mcr" 'cargo-process-run
    "mcs" 'cargo-process-search
    "mct" 'cargo-process-test
    "mcu" 'cargo-process-update
    "mcD" 'cargo-process-doc-open
    "mcx" 'cargo-process-run-example
    "mcX" 'cargo-process-rm
    "mck" 'cargo-process-clippy
    "mcU" 'cargo-process-upgrade
    "mnd" 'racer-find-definition)
#+END_SRC
**** MARKING
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "vw" 'er/mark-word
    "vu" 'er/mark-url
    "ve" 'er/mark-email
    "vs" 'er/mark-sentence
    "vi" 'er/mark-inside-quotes
    "vo" 'er/mark-outside-quotes
    "vf" 'er/mark-defun
    "vc" 'er/mark-comment)
#+END_SRC
**** NAVIGATE/NARROW
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "nb" 'move-beginning-of-line
    "ne" 'move-end-of-line
    "nnf" 'narrow-to-defun
    "nnp" 'narrow-to-page
    "nnr" 'narrow-to-region
    "nnw" 'widen)
#+END_SRC
**** PROJECT
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "pb" 'projectile-switch-to-buffer
    "pc" 'projectile-compile-project
    "pd" 'projectile-find-dir
    "pf" 'projectile-find-file
    "pk" 'projectile-kill-buffers
    "pp" 'projectile-switch-project
    "pr" 'projectile-recentf
    "pt" 'neotree-project-root
    "psa" 'projectile-ag
    "psg" 'projectile-grep
    "psr" 'projectile-ripgrep)
#+END_SRC
**** TEXT
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "xa" 'align-regexp
    "xdd" 'downcase
    "xdm" 'downcase-dwim
    "xdr" 'downcase-region
    "xdw" 'downcase-word
    "xsb" 'flyspell-buffer
    "xsc" 'helm-flyspell-correct
    "xsr" 'flyspell-region
    "xsw" 'flyspell-word
    "xuu" 'upcase
    "xum" 'upcase-dwim
    "xur" 'upcase-region
    "xuw" 'upcase-word
    "xtc" 'transpose-chars
    "xtl" 'transpose-lines
    "xtp" 'transpose-paragraphs
    "xtr" 'transpose-regions
    "xts" 'transpose-sentences
    "xtx" 'transpose-sexps
    "xtw" 'transpose-words)
#+END_SRC
**** TODOS
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "tn" 'hl-todo-next
    "to" 'hl-todo-occur
    "tp" 'hl-todo-previous)
#+END_SRC
**** TOGGLE
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "Tb" 'beacon-blink
    "TF" 'toggle-frame-fullscreen
    "Tg" 'git-gutter-mode
    "Tl" 'nlinum-mode
    "Tm" 'menu-bar-mode
    "Ts" 'scroll-bar-mode
    "Tw" 'whitespace-mode)
#+END_SRC
**** WINDOW
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "wb" 'balance-windows
    "ww" 'switch-window
    "wdc" 'delete-window
    "wdo" 'delete-other-windows
    "wsh" 'split-and-follow-horizontally
    "wsv" 'split-and-follow-vertically
    "wsr" 'split-window-right
    "wsb" 'split-window-below)
#+END_SRC
**** YASNIPPET
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "yn" 'yas-new-snippet
    "yi" 'yas-insert-snippet
    "yv" 'yas-visit-snippet-file
    "yc" 'aya-create
    "ye" 'aya-expand)
#+END_SRC
**** OWN 
#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "op" 'helm-mini)

#+END_SRC
** Games
*** Typing of Emacs 
#+BEGIN_SRC emacs-lisp
  (use-package typing
    :ensure t
    :defer t
    )
#+END_SRC
